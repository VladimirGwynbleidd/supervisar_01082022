<?xml version="1.0"?>
<doc>
<assembly>
<name>
Negocio
</name>
</assembly>
<members>
<member name="M:Negocio.Agendar.EsFinDeSemana(System.DateTime)">
 <summary>
 Verifica si el dia de la semana de una fecha es sabado o domingo
 </summary>
 <param name="fecha">Fecha a validar</param>
 <returns>True si es fin de semana, de lo contrario false</returns>
 <remarks></remarks>
</member>
<member name="M:Negocio.Agendar.EsDiaHabil(System.DateTime)">
 <summary>
 Valida si una fecha dada es un dia habil
 </summary>
 <param name="fecha">Fecha a validar</param>
 <returns>True si es dia habil, de lo contrario false</returns>
 <remarks></remarks>
</member>
<member name="M:Negocio.Agendar.EsHoraLaboral(System.DateTime)">
 <summary>
 Determina si una hora se encuentra en el periodo de atencion
 </summary>
 <param name="fecha">Fecha con la hora a validar</param>
 <returns>True si es periodo de antencion, de lo contrario false</returns>
 <remarks></remarks>
</member>
<member name="M:Negocio.Agendar.ValidaPeriodo(System.String,System.DateTime,System.DateTime,System.Boolean,System.Int32)">
 <summary>
 Valia si se encuentra disponible un periodo para asignacion de tareas de un ingeniero
 </summary>
 <param name="ingeniero">Ingeniero</param>
 <param name="fechainicial">Fecha inicial de validacion</param>
 <param name="fechaFinal">Fecha final de validacion</param>
 <param name="Actualizacion">Indica si la validacion es para la actualizacion de un registro de agenda</param>
 <param name="idRegistroAgenda">Id de registro de agenda, cuando es una validacion de actualizacion de registro de agenda</param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:Negocio.Agendar.ValidaHorarioDisponible(Entities.RegistroAgenda,System.Boolean)">
 <summary>
 Valida si se encuentra disponible el horario seleccionado para la tarea
 </summary>
 <param name="objRegistroAgenda">Objeto RegistroAgenda</param>
 <param name="Actualizacion">Indica si se validara para actualizacion</param>
 <returns>True si el horario esta disponible, de lo contrario false</returns>
 <remarks></remarks>
</member>
<member name="M:Negocio.Agendar.BorraTareasAgenda(Entities.RegistroAgenda,Conexion.SQLServer,System.Data.SqlClient.SqlTransaction,Conexion.Bitacora)">
 <summary>
 Borra los registros de Agenda de una tarea de Registro Agenda
 </summary>
 <param name="objRegistroAgenda">Objeto RegistroAgenda</param>
 <param name="con">Objeto Conexion</param>
 <param name="tran">Objeto Transaccion</param>
 <param name="b">Objeto Bitacora</param>
 <remarks></remarks>
</member>
<member name="M:Negocio.Agendar.NumeroDiasSeleccionados(Entities.RegistroAgenda,System.DateTime)">
 <summary>
 Obtiene el numerio de dias de duracion de la tarea ya sea ciclica o continua
 De igual manera obtiene el numerio de dias de vacaciones dependiendo de las fechas capturadas o el valor enviado
 </summary>
 <param name="FechaFinIntermedia">Fecha final de calculo de dias</param>
 <returns>Numero de dias</returns>
 <remarks></remarks>
</member>
<member name="M:Negocio.Agendar.GuardaAgenda(Entities.RegistroAgenda,Conexion.SQLServer,System.Data.SqlClient.SqlTransaction,Conexion.Bitacora,System.DateTime,System.DateTime)">
 <summary>
 Almacena los registros de Agenda de un dia
 </summary>
 <param name="ObjRegistroAgenda">Objeto RegistroAgenda</param>
 <param name="con">Objeto Conexion</param>
 <param name="tran">Objeto Transaccion</param>
 <param name="bitac">Objeto Bitacora</param>
 <param name="fechaInicial">Fecha y hora inicial, en caso de omitirlo se utilizara la fecha y hora de ObjRegistroAgenda</param>
 <param name="fechaFinal">Fecha y hora final, en caso de omitirlo se utilizara la fecha y hora de ObjRegistroAgenda</param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:Negocio.Agendar.GuardarTarea(Entities.RegistroAgenda,System.Boolean)">
 <summary>
 Guarda un registro agenda y las tareas correspondientes en agenda
 </summary>
 <param name="ObjRegistroAgenda"></param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:Negocio.Agendar.BajaRegistroAgenda(Entities.RegistroAgenda)">
 <summary>
 Da de baja logica un registro agenda y elimina las tareas de agenda
 </summary>
 <param name="objRegistroAgenda">Objeto Registro Agenda</param>
 <returns>True si la baja fue exitosa, de lo contrario false</returns>
 <remarks></remarks>
</member>
<member name="M:Negocio.Carrusel.EstaENCarrusel(System.String)">
 <summary>
 Indica si el usuario recibe asignaciones o no
 </summary>
 <param name="usuario">id de usuario </param>
 <returns>Bolean</returns>
 <remarks></remarks>
</member>
<member name="M:Negocio.Carrusel.InsertaEnCarusel(System.String)">
 <summary>
 Agrega un usuario a la tabla de carrusel
 </summary>
 <param name="usuario">id de usuario </param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:Negocio.Carrusel.ObtenerUsuarios">
 <summary>
 Obtiene la lista de usuarios del sistema y los valores que tengan el el carrusel
 </summary>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:Negocio.Carrusel.ObtenerSiguienteAsignacion">
 <summary>
 Obtiene el siguiente usuario en el orden de recepción de asignaciones según algunas condiciones 
 </summary>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:Negocio.Carrusel.RecibeChanged(System.String@,System.Boolean)">
 <summary>
 Activa o desactiva la propuedad recibe de un usuario en el carrusel
 </summary>
 <param name="usuario">id de usuario </param>
 <param name="recibe">true/false </param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:Negocio.Carrusel.ActualizaOrden(System.String,System.String,System.Int16)">
 <summary>
 Activa o desactiva la propuedad recibe de un usuario en el carrusel
 </summary>
 <param name="UsuarioActual">id de usuario actual </param>
 <param name="command">comando invocado </param>
 <param name="PosicionActual">pocision actual que tiene el usuario </param>
 <returns></returns>
</member>
<member name="M:Negocio.Carrusel.ObtienePeriodosDeNoAsignacion(System.String)">
 <summary>
 Obtiene los periodode de asignacion para un usuario
 </summary>
 <param name="usuario">id del usuario </param>
 <returns>Dataset</returns>
</member>
<member name="M:Negocio.Carrusel.AgregarPeriodo(System.String,System.String,System.String)">
 <summary>
 Inserta periodo de NO asignacion a usuario
 </summary>
 <param name="FechaIni">fecha de inicio fin del periodo</param>
  <param name="FechaFin">fecha de fin del periodo </param>
 <param name="usuario">id del usuario </param>
 <remarks></remarks>
</member>
<member name="M:Negocio.Carrusel.VerificaFechas(System.String,System.String,System.String)">
 <summary>
 Verifica que las fechas del periodo sean validas
 </summary>
 <param name="FechaIni">fecha de inicio fin del periodo</param>
  <param name="FechaFin">fecha de fin del periodo </param>
 <param name="usuario">id del usuario </param>
</member>
<member name="M:Negocio.Carrusel.RevisaNoTraslape(System.String,System.String,System.String)">
 <summary>
 Función que verifica no exista traslape entre los periodos seleccionados.
 False: periodo traslapado
 </summary>
 <param name="FechaIni">fecha de inicio fin del periodo</param>
  <param name="FechaFin">fecha de fin del periodo </param>
 <param name="usuario">id del usuario </param>
 <remarks></remarks>
</member>
<member name="M:Negocio.Carrusel.FechaValida(System.String)">
 <summary>
 Verifica que la fecha ingresada sea válida
 </summary>
 <param name="fecha"></param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:Negocio.Carrusel.EliminaPeriodo(System.String,System.String,System.String)">
 <summary>
 Elimina un periodo de asignación
 </summary>
 <param name="FechaIni">fecha de inicio fin del periodo</param>
  <param name="FechaFin">fecha de fin del periodo </param>
 <param name="usuario">id del usuario </param>
 <returns></returns>
</member>
<member name="M:Negocio.Correo.ObtenerSiguienteIdentificador">
 <summary>
 Obtiene el siguiente id de la tabla
 </summary>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:Negocio.Correo.Agregar">
 <summary>
 Registra un correo
 </summary>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:Negocio.Correo.Actualizar">
 <summary>
 Actualiza un correo
 </summary>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:Negocio.Correo.Baja">
 <summary>
 Elimina un correo
 </summary>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="T:Negocio.My.Resources.Resources">
<summary>
  A strongly-typed resource class, for looking up localized strings, etc.
</summary>
</member>
<member name="P:Negocio.My.Resources.Resources.ResourceManager">
<summary>
  Returns the cached ResourceManager instance used by this class.
</summary>
</member>
<member name="P:Negocio.My.Resources.Resources.Culture">
<summary>
  Overrides the current thread's CurrentUICulture property for all
  resource lookups using this strongly typed resource class.
</summary>
</member>
<member name="M:Negocio.ReasignarServicio.Reagendar(System.String,System.Int32,Negocio.ReasignarServicio.Tipo,System.String)">
 <summary>
 Reagenda un nivel de servicio ya sea para el mismo ingeniero o a uno diferente(reasignacion)
 </summary>
 <param name="Folio">Folio de Solicitud</param>
 <param name="idNivelServicio">Id Servicio</param>
 <param name="tipoReagenda">Indica si es reagendado o reasignacion</param>
 <param name="IngenieroResponsable">Usuario al que se reasigna</param>
 <returns>True si se actualizo correctamente</returns>
 <remarks>Si es reasignacion se debe especificar el usuario a reagendar</remarks>
</member>
</members>
</doc>
